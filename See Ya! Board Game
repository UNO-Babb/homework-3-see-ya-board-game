from flask import Flask, render_template, request, redirect, url_for, session
import random

app = Flask(__name__)
app.secret_key = "seeya_game_secret"

# Constants
NUM_SPACES = 50
COLORS = ["Red", "Blue", "Green", "Yellow", "Orange"]
ACTIONS = {
    6: "Swap your pawn with another player's pawn.",
    7: "Skip the next player's turn.",
    8: "Roll the dice two more times.",
    9: "Go back to the start.",
    10: "Move forward 10 spaces."
}

# Helper functions
def initialize_board():
    """Initialize the game board with 50 spaces."""
    return [f"{i+1}. -" for i in range(NUM_SPACES)]


def move_player(board, player_color, steps):
    """Move the player forward or backward."""
    current_position = find_player_position(board, player_color)
    new_position = current_position + steps if steps >= 0 else 0

    # Remove player from current position
    if current_position >= 0:
        board[current_position] = board[current_position].replace(
            f"{player_color}, ", "").replace(f", {player_color}", "").replace(player_color, "-")

    # Add player to the new position
    if new_position >= NUM_SPACES:
        new_position = NUM_SPACES - 1  # Limit to the last space
    if board[new_position].endswith("-"):
        board[new_position] = board[new_position].replace("-", player_color)
    else:
        board[new_position] += f", {player_color}"

    return board, new_position


def find_player_position(board, player_color):
    """Find the position of a player's pawn on the board."""
    for i, space in enumerate(board):
        if player_color in space:
            return i
    return -1


# Routes
@app.route("/", methods=["GET", "POST"])
def index():
    """Homepage to choose the number of players and assign colors."""
    if request.method == "POST":
        num_players = int(request.form["num_players"])
        session["players"] = COLORS[:num_players]
        session["board"] = initialize_board()
        session["turn_index"] = 0
        session["skip_next"] = False
        return redirect(url_for("game"))
    return render_template("index.html", max_players=len(COLORS))


@app.route("/game", methods=["GET", "POST"])
def game():
    """Main game board view."""
    players = session.get("players", [])
    board = session.get("board", [])
    turn_index = session.get("turn_index", 0)
    skip_next = session.get("skip_next", False)
    current_player = players[turn_index]
    dice_roll = None
    action_message = None

    if request.method == "POST":
        # Handle dice roll
        dice_roll = random.randint(1, 10)
        if skip_next:
            action_message = f"{current_player}'s turn is skipped."
            session["skip_next"] = False
        else:
            if dice_roll <= 5 or dice_roll == 10:  # Move forward
                steps = dice_roll
                board, _ = move_player(board, current_player, steps)
            elif dice_roll == 6:  # Swap
                action_message = "You rolled a 6! Choose another player to swap pawns."
            elif dice_roll == 7:  # Skip next player's turn
                action_message = "You rolled a 7! The next player's turn is skipped."
                session["skip_next"] = True
            elif dice_roll == 8:  # Roll twice
                action_message = "You rolled an 8! Roll the dice two more times."
                extra_roll_1 = random.randint(1, 5)
                extra_roll_2 = random.randint(1, 5)
                board, _ = move_player(board, current_player, extra_roll_1 + extra_roll_2)
            elif dice_roll == 9:  # Go back to start
                board, _ = move_player(board, current_player, -50)  # Send back to start

        # Check for win condition
        if find_player_position(board, current_player) == NUM_SPACES - 1:
            return f"Congratulations! {current_player} wins!"

        # Update turn
        session["turn_index"] = (turn_index + 1) % len(players)
        session["board"] = board

    return render_template(
        "game.html",
        board=board,
        players=players,
        current_player=current_player,
        dice_roll=dice_roll,
        action_message=action_message,
        actions=ACTIONS
    )


if __name__ == "__main__":
    app.run(debug=True)







